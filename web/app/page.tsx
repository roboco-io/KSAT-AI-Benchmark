'use client';

import { Container, Title, Text, Stack, Group, Badge, Card, SimpleGrid, Accordion, Table, ScrollArea, Box, Anchor, Tabs } from '@mantine/core';
import { useState, useEffect } from 'react';

export default function Home() {
  const [leaderboard, setLeaderboard] = useState<any[]>([]);
  const [leaderboardBySubject, setLeaderboardBySubject] = useState<any>({});
  const [results, setResults] = useState<any[]>([]);
  const [examsData, setExamsData] = useState<any>({});
  const [stats, setStats] = useState({ totalExams: 0, totalEvaluations: 0 });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadData() {
      try {
        const basePath = process.env.NODE_ENV === 'production' ? '/KSAT-AI-Benchmark' : '';
        const response = await fetch(`${basePath}/data/evaluation-data.json`);
        const data = await response.json();
        setLeaderboard(data.leaderboard);
        setLeaderboardBySubject(data.leaderboardBySubject || {});
        setResults(data.results || []);
        setExamsData(data.exams || {});
        setStats(data.stats);
      } catch (error) {
        console.error('Failed to load data:', error);
      } finally {
        setLoading(false);
      }
    }
    loadData();
  }, []);

  if (loading) {
    return (
      <Container size="xl" py="xl">
        <Text>Î°úÎî© Ï§ë...</Text>
      </Container>
    );
  }

  const { totalExams, totalEvaluations } = stats;

  // ÏãúÌóò Î™©Î°ù Ï∂îÏ∂ú
  const examsList = Object.values(examsData).map((exam: any) => ({
    id: exam.exam_id,
    title: exam.title,
    subject: exam.subject,
    year: exam.year,
  }));

  // Î™®Îç∏ ÏõπÏÇ¨Ïù¥Ìä∏ Îß§Ìïë
  const modelWebsites: Record<string, string> = {
    'gpt-5': 'https://openai.com/ko-KR/index/introducing-gpt-5/',
    'gpt-4o': 'https://openai.com/ko-KR/index/gpt-4o/',
    'claude-opus-4-1': 'https://www.anthropic.com/products/claude-opus',
    'claude-sonnet-4-5': 'https://www.anthropic.com/products/claude-sonnet',
    'solar-pro': 'https://upstage.ai/kr/solar/',
    'sonar-pro': 'https://www.perplexity.ai/enterprise/sonar',
  };

  // Î™®Îç∏ Î™©Î°ù Ï∂îÏ∂ú
  const modelsList = leaderboard.map((entry) => ({
    name: entry.model_name,
    website: modelWebsites[entry.model_name] || '#',
    accuracy: entry.accuracy,
    examsCount: entry.exams_count,
  }));

  // Í≥ºÎ™©Î≥Ñ Î¶¨ÎçîÎ≥¥Îìú Î†åÎçîÎßÅ Ìï®Ïàò
  const renderSubjectLeaderboard = (subject: string, subjectName: string) => {
    const subjectBoard = leaderboardBySubject[subject] || [];
    const subjectResults = results.filter(r => r.subject === subject);

    if (subjectBoard.length === 0) {
      return <Text ta="center" c="dimmed">{subjectName} ÌèâÍ∞Ä Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</Text>;
    }

    return (
      <Accordion variant="contained">
        {subjectBoard.map((entry: any, index: number) => {
          const modelResults = subjectResults.filter(r => r.model_name === entry.model_name);
          const accuracyColor = entry.accuracy >= 70 ? 'blue' : entry.accuracy >= 50 ? 'teal' : entry.accuracy >= 30 ? 'yellow' : 'red';

          return (
            <Accordion.Item key={entry.model_name} value={entry.model_name}>
              <Accordion.Control>
                <Group justify="space-between" mr="md">
                  <Group>
                    <Text fw={700} size="xl">#{index + 1}</Text>
                    <div>
                      <Text fw={600} size="lg">{entry.model_name}</Text>
                      <Text size="sm" c="dimmed">
                        Ï†ïÎãµÎ•† {entry.accuracy.toFixed(1)}% ¬∑ {entry.exams_count}Í∞ú ÏãúÌóò
                      </Text>
                    </div>
                  </Group>
                  <div style={{ textAlign: 'right' }}>
                    <Text size="xl" fw={700} c={accuracyColor}>
                      {entry.accuracy.toFixed(1)}%
                    </Text>
                    <Text size="sm" c="dimmed">
                      {entry.total_score}/{entry.max_score}Ï†ê
                    </Text>
                  </div>
                </Group>
              </Accordion.Control>

              <Accordion.Panel>
                <Stack gap="md">
                  {modelResults.map((result) => {
                    const examInfo = examsData[result.exam_id];

                    return (
                      <Card key={result.exam_id} withBorder>
                        <Stack gap="md">
                          <div>
                            <Text fw={600} size="lg">{result.exam_title}</Text>
                            <Text size="sm" c="dimmed">
                              Ï†ïÎãµÎ•†: {result.summary.accuracy.toFixed(1)}% ¬∑
                              Ï†êÏàò: {result.summary.total_score}/{result.summary.max_score}Ï†ê
                            </Text>
                          </div>

                          <Accordion variant="separated">
                            {result.results.map((q: any) => {
                              const questionData = examInfo?.questions?.find(
                                (eq: any) => eq.question_id === q.question_id || eq.question_number === q.question_number
                              );

                              return (
                                <Accordion.Item key={q.question_id} value={q.question_id}>
                                  <Accordion.Control>
                                    <Group justify="space-between" mr="md">
                                      <Group>
                                        <Badge color={q.is_correct ? 'green' : 'red'} size="lg">
                                          {q.question_number}Î≤à
                                        </Badge>
                                        <Text fw={500}>
                                          {q.is_correct ? '‚úì Ï†ïÎãµ' : '‚úó Ïò§Îãµ'} ¬∑ {q.points}Ï†ê
                                        </Text>
                                      </Group>
                                      <Group gap="xs">
                                        <Text size="sm" fw={600}>
                                          ÎãµÎ≥Ä: {q.answer}Î≤à
                                        </Text>
                                        {!q.is_correct && (
                                          <Text size="sm" c="dimmed">
                                            (Ï†ïÎãµ: {q.correct_answer}Î≤à)
                                          </Text>
                                        )}
                                        <Text size="xs" c="dimmed">
                                          {q.time_taken.toFixed(2)}Ï¥à
                                        </Text>
                                      </Group>
                                    </Group>
                                  </Accordion.Control>

                                  <Accordion.Panel>
                                    <Stack gap="md">
                                      {/* ÏßÄÎ¨∏ */}
                                      {questionData?.passage && (
                                        <Card withBorder bg="blue.0">
                                          <Stack gap="sm">
                                            <Text fw={700} size="md" c="blue">
                                              üìñ ÏßÄÎ¨∏
                                            </Text>
                                            <Text size="sm" style={{ whiteSpace: 'pre-wrap', lineHeight: 1.8 }}>
                                              {questionData.passage}
                                            </Text>
                                          </Stack>
                                        </Card>
                                      )}

                                      {/* Î¨∏Ï†ú */}
                                      {questionData && (
                                        <Card withBorder bg="gray.0">
                                          <Stack gap="sm">
                                            <Text fw={700} size="md" c="blue">
                                              üìù Î¨∏Ï†ú {q.question_number}Î≤à
                                            </Text>
                                            <Text style={{ whiteSpace: 'pre-wrap' }}>
                                              {questionData.question_text}
                                            </Text>

                                            {questionData.choices && questionData.choices.length > 0 && (
                                              <Stack gap="xs" mt="sm">
                                                <Text fw={600} size="sm">ÏÑ†ÌÉùÏßÄ:</Text>
                                                {questionData.choices.map((choice: string, idx: number) => {
                                                  const choiceNum = idx + 1;
                                                  const isModelAnswer = choiceNum === q.answer;
                                                  const isCorrectAnswer = choiceNum === q.correct_answer;

                                                  let badgeColor = 'gray';
                                                  if (isCorrectAnswer && isModelAnswer) {
                                                    badgeColor = 'green';
                                                  } else if (isCorrectAnswer) {
                                                    badgeColor = 'blue';
                                                  } else if (isModelAnswer) {
                                                    badgeColor = 'red';
                                                  }

                                                  return (
                                                    <Group key={idx} gap="xs" align="flex-start">
                                                      <Badge color={badgeColor} variant="light" size="lg" mt={4}>
                                                        {choiceNum}
                                                      </Badge>
                                                      <Text style={{ flex: 1 }}>{choice}</Text>
                                                      {isCorrectAnswer && <Text c="blue" fw={600}>‚úì Ï†ïÎãµ</Text>}
                                                      {isModelAnswer && !isCorrectAnswer && <Text c="red" fw={600}>‚úó ÏÑ†ÌÉù</Text>}
                                                      {isModelAnswer && isCorrectAnswer && <Text c="green" fw={600}>‚úì ÏÑ†ÌÉù</Text>}
                                                    </Group>
                                                  );
                                                })}
                                              </Stack>
                                            )}
                                          </Stack>
                                        </Card>
                                      )}

                                      {/* Î™®Îç∏ ÎãµÎ≥Ä */}
                                      <Card withBorder bg={q.is_correct ? 'green.0' : 'red.0'}>
                                        <Stack gap="sm">
                                          <Group justify="space-between">
                                            <Text fw={700} size="md">
                                              ü§ñ Î™®Îç∏Ïùò ÎãµÎ≥Ä Î∞è ÌíÄÏù¥
                                            </Text>
                                            <Badge color={q.is_correct ? 'green' : 'red'} size="lg">
                                              {q.is_correct ? 'Ï†ïÎãµ' : 'Ïò§Îãµ'} ¬∑ {q.earned_points}/{q.points}Ï†ê
                                            </Badge>
                                          </Group>

                                          <div>
                                            <Text size="sm" fw={600} mb="xs">ÏÑ†ÌÉùÌïú Îãµ:</Text>
                                            <Text size="lg" fw={700}>
                                              {q.answer}Î≤à {q.is_correct ? '‚úì' : '‚úó'}
                                            </Text>
                                          </div>

                                          <div>
                                            <Text size="sm" fw={600} mb="xs">ÌíÄÏù¥ Í≥ºÏ†ï:</Text>
                                            <Text style={{ whiteSpace: 'pre-wrap' }}>
                                              {q.reasoning || 'ÌíÄÏù¥ Ï†ïÎ≥¥ ÏóÜÏùå'}
                                            </Text>
                                          </div>

                                          <Text size="xs" c="dimmed">
                                            ÏÜåÏöî ÏãúÍ∞Ñ: {q.time_taken.toFixed(2)}Ï¥à
                                          </Text>
                                        </Stack>
                                      </Card>
                                    </Stack>
                                  </Accordion.Panel>
                                </Accordion.Item>
                              );
                            })}
                          </Accordion>

                          <Group justify="space-between" mt="md">
                            <Text size="sm" fw={600}>
                              Ï†ïÎãµÎ•†: {result.summary.accuracy.toFixed(1)}% ({result.summary.correct_answers}Í∞ú Ï†ïÎãµ)
                            </Text>
                            <Text size="sm" c="dimmed">
                              ÌèâÍ∑† ÏùëÎãµ ÏãúÍ∞Ñ: {(result.results.reduce((sum: number, r: any) => sum + r.time_taken, 0) / result.results.length).toFixed(2)}Ï¥à
                            </Text>
                          </Group>
                        </Stack>
                      </Card>
                    );
                  })}
                </Stack>
              </Accordion.Panel>
            </Accordion.Item>
          );
        })}
      </Accordion>
    );
  };

  return (
    <Container size="xl" py="xl">
      <Stack gap="xl">
        <div>
          <Title order={1} mb="xs">
            üèÜ KSAT AI Benchmark
          </Title>
          <Text c="dimmed" size="lg" mb="sm">
            ÎåÄÌïúÎØºÍµ≠ ÏàòÎä• Î¨∏Ï†úÎ•º ÌôúÏö©Ìïú AI Î™®Îç∏ ÏÑ±Îä• ÌèâÍ∞Ä
          </Text>
          <Group gap="xs">
            <Anchor 
              href="https://github.com/roboco-io/KSAT-AI-Benchmark" 
              target="_blank" 
              rel="noopener noreferrer"
              size="sm"
              fw={500}
            >
              üì¶ GitHub Repository
            </Anchor>
            <Text c="dimmed" size="sm">¬∑</Text>
            <Anchor 
              href="https://github.com/roboco-io/KSAT-AI-Benchmark/issues" 
              target="_blank" 
              rel="noopener noreferrer"
              size="sm"
            >
              üí¨ Ïù¥Ïäà Ï†úÎ≥¥
            </Anchor>
          </Group>
        </div>

        <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
          {/* ÌèâÍ∞ÄÎêú ÏãúÌóò Ï∫êÎü¨ÏÜî */}
          <Card shadow="sm" padding="lg" radius="md" withBorder>
            <Text size="sm" c="dimmed" mb="xs">ÌèâÍ∞ÄÎêú ÏãúÌóò</Text>
            <Text size="xl" fw={700} mb="sm">{totalExams}Í∞ú</Text>
            <ScrollArea h={120} type="auto">
              <Stack gap="xs">
                {examsList.map((exam, idx) => (
                  <Box key={exam.id} p="xs" style={{
                    backgroundColor: 'var(--mantine-color-gray-0)',
                    borderRadius: '4px',
                    border: '1px solid var(--mantine-color-gray-3)'
                  }}>
                    <Text size="sm" fw={600}>{idx + 1}. {exam.title}</Text>
                    <Text size="xs" c="dimmed">{exam.year}ÎÖÑ ¬∑ {exam.subject}</Text>
                  </Box>
                ))}
              </Stack>
            </ScrollArea>
          </Card>

          {/* ÌèâÍ∞ÄÏóê ÏÇ¨Ïö©Îêú Î™®Îç∏Îì§ Ï∫êÎü¨ÏÜî */}
          <Card shadow="sm" padding="lg" radius="md" withBorder>
            <Text size="sm" c="dimmed" mb="xs">ÌèâÍ∞ÄÏóê ÏÇ¨Ïö©Îêú Î™®Îç∏Îì§</Text>
            <Text size="xl" fw={700} mb="sm">{modelsList.length}Í∞ú</Text>
            <ScrollArea h={120} type="auto">
              <Stack gap="xs">
                {modelsList.map((model, idx) => (
                  <Box key={model.name} p="xs" style={{
                    backgroundColor: 'var(--mantine-color-blue-0)',
                    borderRadius: '4px',
                    border: '1px solid var(--mantine-color-blue-3)'
                  }}>
                    <Text size="sm" fw={600}>{idx + 1}. {model.name}</Text>
                    <Anchor href={model.website} target="_blank" size="xs" c="blue">
                      Í≥µÏãù ÏõπÏÇ¨Ïù¥Ìä∏ ‚Üí
                    </Anchor>
                  </Box>
                ))}
              </Stack>
            </ScrollArea>
          </Card>
        </SimpleGrid>

        <div>
          <Title order={2} mb="md">Î¶¨ÎçîÎ≥¥Îìú</Title>
          <Card shadow="sm" padding="lg" radius="md" withBorder>
            <Tabs defaultValue="overall">
              <Tabs.List>
                <Tabs.Tab value="overall">
                  üìä Ï¢ÖÌï©
                </Tabs.Tab>
                <Tabs.Tab value="korean">
                  üìö Íµ≠Ïñ¥
                </Tabs.Tab>
                <Tabs.Tab value="math">
                  üî¢ ÏàòÌïô
                </Tabs.Tab>
                <Tabs.Tab value="english">
                  üåê ÏòÅÏñ¥ (Îì£Í∏∞ Ï†úÏô∏)
                </Tabs.Tab>
              </Tabs.List>

              <Tabs.Panel value="overall" pt="md">
                {leaderboard.length > 0 ? (
                  <Accordion variant="contained">
                    {leaderboard.map((entry, index) => {
                  const modelResults = results.filter(r => r.model_name === entry.model_name);
                  const accuracyColor = entry.accuracy >= 70 ? 'blue' : entry.accuracy >= 50 ? 'teal' : entry.accuracy >= 30 ? 'yellow' : 'red';

                  return (
                    <Accordion.Item key={entry.model_name} value={entry.model_name}>
                      <Accordion.Control>
                        <Group justify="space-between" mr="md">
                          <Group>
                            <Text fw={700} size="xl">#{index + 1}</Text>
                            <div>
                              <Text fw={600} size="lg">{entry.model_name}</Text>
                              <Text size="sm" c="dimmed">
                                Ï†ïÎãµÎ•† {entry.accuracy.toFixed(1)}% ¬∑ {entry.exams_count}Í∞ú ÏãúÌóò
                              </Text>
                            </div>
                          </Group>
                          <div style={{ textAlign: 'right' }}>
                            <Text size="xl" fw={700} c={accuracyColor}>
                              {entry.accuracy.toFixed(1)}%
                            </Text>
                            <Text size="sm" c="dimmed">
                              {entry.total_score}/{entry.max_score}Ï†ê
                            </Text>
                          </div>
                        </Group>
                      </Accordion.Control>

                      <Accordion.Panel>
                        <Stack gap="md">
                          {modelResults.map((result) => {
                            const examInfo = examsData[result.exam_id];
                            
                            return (
                              <Card key={result.exam_id} withBorder>
                                <Stack gap="md">
                                  <div>
                                    <Text fw={600} size="lg">{result.exam_title}</Text>
                                    <Text size="sm" c="dimmed">
                                      Ï†ïÎãµÎ•†: {result.summary.accuracy.toFixed(1)}% ¬∑ 
                                      Ï†êÏàò: {result.summary.total_score}/{result.summary.max_score}Ï†ê
                                    </Text>
                                  </div>

                                  <Accordion variant="separated">
                                    {result.results.map((q: any) => {
                                      const questionData = examInfo?.questions?.find(
                                        (eq: any) => eq.question_id === q.question_id || eq.question_number === q.question_number
                                      );

                                      return (
                                        <Accordion.Item key={q.question_id} value={q.question_id}>
                                          <Accordion.Control>
                                            <Group justify="space-between" mr="md">
                                              <Group>
                                                <Badge color={q.is_correct ? 'green' : 'red'} size="lg">
                                                  {q.question_number}Î≤à
                                                </Badge>
                                                <Text fw={500}>
                                                  {q.is_correct ? '‚úì Ï†ïÎãµ' : '‚úó Ïò§Îãµ'} ¬∑ {q.points}Ï†ê
                                                </Text>
                                              </Group>
                                              <Group gap="xs">
                                                <Text size="sm" fw={600}>
                                                  ÎãµÎ≥Ä: {q.answer}Î≤à
                                                </Text>
                                                {!q.is_correct && (
                                                  <Text size="sm" c="dimmed">
                                                    (Ï†ïÎãµ: {q.correct_answer}Î≤à)
                                                  </Text>
                                                )}
                                                <Text size="xs" c="dimmed">
                                                  {q.time_taken.toFixed(2)}Ï¥à
                                                </Text>
                                              </Group>
                                            </Group>
                                          </Accordion.Control>

                                          <Accordion.Panel>
                                            <Stack gap="md">
                                              {/* ÏßÄÎ¨∏ */}
                                              {questionData?.passage && (
                                                <Card withBorder bg="blue.0">
                                                  <Stack gap="sm">
                                                    <Text fw={700} size="md" c="blue">
                                                      üìñ ÏßÄÎ¨∏
                                                    </Text>
                                                    <Text size="sm" style={{ whiteSpace: 'pre-wrap', lineHeight: 1.8 }}>
                                                      {questionData.passage}
                                                    </Text>
                                                  </Stack>
                                                </Card>
                                              )}

                                              {/* Î¨∏Ï†ú */}
                                              {questionData && (
                                                <Card withBorder bg="gray.0">
                                                  <Stack gap="sm">
                                                    <Text fw={700} size="md" c="blue">
                                                      üìù Î¨∏Ï†ú {q.question_number}Î≤à
                                                    </Text>
                                                    <Text style={{ whiteSpace: 'pre-wrap' }}>
                                                      {questionData.question_text}
                                                    </Text>

                                                    {questionData.choices && questionData.choices.length > 0 && (
                                                      <Stack gap="xs" mt="sm">
                                                        <Text fw={600} size="sm">ÏÑ†ÌÉùÏßÄ:</Text>
                                                        {questionData.choices.map((choice: string, idx: number) => {
                                                          const choiceNum = idx + 1;
                                                          const isModelAnswer = choiceNum === q.answer;
                                                          const isCorrectAnswer = choiceNum === q.correct_answer;

                                                          let badgeColor = 'gray';
                                                          if (isCorrectAnswer && isModelAnswer) {
                                                            badgeColor = 'green';
                                                          } else if (isCorrectAnswer) {
                                                            badgeColor = 'blue';
                                                          } else if (isModelAnswer) {
                                                            badgeColor = 'red';
                                                          }

                                                          return (
                                                            <Group key={idx} gap="xs" align="flex-start">
                                                              <Badge color={badgeColor} variant="light" size="lg" mt={4}>
                                                                {choiceNum}
                                                              </Badge>
                                                              <Text style={{ flex: 1 }}>{choice}</Text>
                                                              {isCorrectAnswer && <Text c="blue" fw={600}>‚úì Ï†ïÎãµ</Text>}
                                                              {isModelAnswer && !isCorrectAnswer && <Text c="red" fw={600}>‚úó ÏÑ†ÌÉù</Text>}
                                                              {isModelAnswer && isCorrectAnswer && <Text c="green" fw={600}>‚úì ÏÑ†ÌÉù</Text>}
                                                            </Group>
                                                          );
                                                        })}
                                                      </Stack>
                                                    )}
                                                  </Stack>
                                                </Card>
                                              )}

                                              {/* Î™®Îç∏ ÎãµÎ≥Ä */}
                                              <Card withBorder bg={q.is_correct ? 'green.0' : 'red.0'}>
                                                <Stack gap="sm">
                                                  <Group justify="space-between">
                                                    <Text fw={700} size="md">
                                                      ü§ñ Î™®Îç∏Ïùò ÎãµÎ≥Ä Î∞è ÌíÄÏù¥
                                                    </Text>
                                                    <Badge color={q.is_correct ? 'green' : 'red'} size="lg">
                                                      {q.is_correct ? 'Ï†ïÎãµ' : 'Ïò§Îãµ'} ¬∑ {q.earned_points}/{q.points}Ï†ê
                                                    </Badge>
                                                  </Group>

                                                  <div>
                                                    <Text size="sm" fw={600} mb="xs">ÏÑ†ÌÉùÌïú Îãµ:</Text>
                                                    <Text size="lg" fw={700}>
                                                      {q.answer}Î≤à {q.is_correct ? '‚úì' : '‚úó'}
                                                    </Text>
                                                  </div>

                                                  <div>
                                                    <Text size="sm" fw={600} mb="xs">ÌíÄÏù¥ Í≥ºÏ†ï:</Text>
                                                    <Text style={{ whiteSpace: 'pre-wrap' }}>
                                                      {q.reasoning || 'ÌíÄÏù¥ Ï†ïÎ≥¥ ÏóÜÏùå'}
                                                    </Text>
                                                  </div>

                                                  <Text size="xs" c="dimmed">
                                                    ÏÜåÏöî ÏãúÍ∞Ñ: {q.time_taken.toFixed(2)}Ï¥à
                                                  </Text>
                                                </Stack>
                                              </Card>
                                            </Stack>
                                          </Accordion.Panel>
                                        </Accordion.Item>
                                      );
                                    })}
                                  </Accordion>

                                  <Group justify="space-between" mt="md">
                                    <Text size="sm" fw={600}>
                                      Ï†ïÎãµÎ•†: {result.summary.accuracy.toFixed(1)}% ({result.summary.correct_answers}Í∞ú Ï†ïÎãµ)
                                    </Text>
                                    <Text size="sm" c="dimmed">
                                      ÌèâÍ∑† ÏùëÎãµ ÏãúÍ∞Ñ: {(result.results.reduce((sum: number, r: any) => sum + r.time_taken, 0) / result.results.length).toFixed(2)}Ï¥à
                                    </Text>
                                  </Group>
                                </Stack>
                              </Card>
                            );
                          })}
                        </Stack>
                      </Accordion.Panel>
                    </Accordion.Item>
                  );
                })}
              </Accordion>
            ) : (
              <Text ta="center" c="dimmed">ÌèâÍ∞Ä Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</Text>
            )}
              </Tabs.Panel>

              {/* Íµ≠Ïñ¥ ÌÉ≠ */}
              <Tabs.Panel value="korean" pt="md">
                {renderSubjectLeaderboard('korean', 'Íµ≠Ïñ¥')}
              </Tabs.Panel>

              {/* ÏàòÌïô ÌÉ≠ */}
              <Tabs.Panel value="math" pt="md">
                {renderSubjectLeaderboard('math', 'ÏàòÌïô')}
              </Tabs.Panel>

              {/* ÏòÅÏñ¥ ÌÉ≠ */}
              <Tabs.Panel value="english" pt="md">
                {renderSubjectLeaderboard('english', 'ÏòÅÏñ¥')}
              </Tabs.Panel>
            </Tabs>
          </Card>
        </div>

        <Card shadow="sm" padding="lg" radius="md" withBorder>
          <Text size="sm" c="dimmed">
            üìä Ïù¥ Î≤§ÏπòÎßàÌÅ¨Îäî ÎåÄÌïúÎØºÍµ≠ ÏàòÎä• Î¨∏Ï†úÎ•º ÌôúÏö©ÌïòÏó¨ AI Î™®Îç∏Ïùò Ïñ∏Ïñ¥ Ïù¥Ìï¥ Î∞è Ï∂îÎ°† Îä•Î†•ÏùÑ ÌèâÍ∞ÄÌï©ÎãàÎã§.
          </Text>
          <Text size="sm" c="dimmed" mt="xs">
            üí° Í∞Å Î™®Îç∏ÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ Î¨∏Ï†úÎ≥Ñ ÏÉÅÏÑ∏ Í≤∞Í≥ºÏôÄ ÎãµÎ≥Ä Ïù¥Ïú†Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
          </Text>
          <Text size="sm" c="orange" mt="md" fw={500}>
            ‚ö†Ô∏è Google Gemini 2.5 Pro Ï†úÏô∏ ÏÇ¨Ïú†
          </Text>
          <Text size="sm" c="dimmed" mt="xs">
            GoogleÏùò ÏïàÏ†Ñ ÌïÑÌÑ∞Í∞Ä ÌïúÍµ≠Ïñ¥ ÏàòÎä• Î¨∏Ï†ú ÏΩòÌÖêÏ∏†Î•º Ïú†Ìï¥ ÏΩòÌÖêÏ∏†Î°ú Ïò§Ïù∏ÌïòÏó¨ ÎåÄÎ∂ÄÎ∂ÑÏùò Î¨∏Ï†úÏóêÏÑú SAFETY ÏùëÎãµÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
            BLOCK_NONE ÏÑ§Ï†ïÏóêÎèÑ Î∂àÍµ¨ÌïòÍ≥† Ï†ïÏÉÅÏ†ÅÏù∏ ÌèâÍ∞ÄÍ∞Ä Î∂àÍ∞ÄÎä•ÌïòÏó¨ Î≤§ÏπòÎßàÌÅ¨ÏóêÏÑú Ï†úÏô∏ÌïòÏòÄÏäµÎãàÎã§.
          </Text>
        </Card>
      </Stack>
    </Container>
  );
}
